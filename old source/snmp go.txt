package main

import (
 "database/sql"
 "encoding/json"
 "fmt"
 "log"
 "net"
 "time"

 _ "github.com/go-sql-driver/mysql"
 "github.com/soniah/gosnmp"
)

// Struct to hold SNMP server details
type SNMPConfig struct {
 IP string
 Port uint16
}

// Struct to hold SNMP trap information
type SNMPTrap struct {
 Oid string `json:"oid"`
 Value string `json:"value"`
 StartTime int64 `json:"start_time"`
}

// Function to open UDP socket and listen for SNMP traps
func listenForSNMPTraps(addr string) {
 // Open UDP socket on the specified address
 conn, err := net.ListenPacket("udp", addr)
 if err != nil {
 log.Fatalf("Error creating UDP socket: %s\n", err.Error())
 }
 defer conn.Close()

 fmt.Printf("UDP server listening on %s\n", addr)

 // Buffer to store incoming packet data
 buffer := make([]byte, 1024)

 // Receive and process incoming packets
 for {
 // Read from the connection into the buffer
 n, _, err := conn.ReadFrom(buffer)
 if err != nil {
 log.Printf("Error reading from UDP socket: %s\n", err.Error())
 continue
 }

 go func(packet []byte) {
 // Extract SNMP trap information from the received packet
 trap, err := extractSNMPTrapInfo(packet)
 if err != nil {
 log.Printf("Error extracting SNMP trap information: %s\n", err.Error())
 return
 }

 // Retrieve SNMP server details from the database
 snmpConfig, err := getSNMPConfigFromDB()
 if err != nil {
 log.Printf("Error retrieving SNMP server details: %s\n", err.Error())
 return
 }

 // Create an SNMP trap message
 trap.StartTime = time.Now().Unix()

 // Convert SNMP trap to JSON
 trapJSON, err := json.Marshal(trap)
 if err != nil {
 log.Printf("Error converting SNMP trap to JSON: %s\n", err.Error())
 return
 }

 // Send the SNMP trap message to the SNMP server
 err = sendSNMPTrap(trapJSON, snmpConfig.IP, snmpConfig.Port)
 if err != nil {
 log.Printf("Error sending SNMP trap: %s\n", err.Error())
 return
 }

 fmt.Println("SNMP trap sent successfully!")
 }(buffer[:n])
 }
}

// Function to extract SNMP trap information from the packet
func extractSNMPTrapInfo(packet []byte) (*SNMPTrap, error) {
 // Add your logic to extract the OID and value from the packet
 // and create an SNMPTrap struct with the extracted values
 oid := "1.3.6.1.2.1.1.3.0"
 value := "uptime"
 trap := &SNMPTrap{
 Oid: oid,
 Value: value,
 }
 return trap, nil
}

// Function to retrieve SNMP server details from the database
func getSNMPConfigFromDB() (SNMPConfig, error) {
 // Connect to the cs.db database to retrieve SNMP server details
 db, err := sql.Open("mysql", "user:password@tcp(localhost:3306)/cs.db")
 if err != nil {
 return SNMPConfig{}, fmt.Errorf("Error connecting to database: %s", err.Error())
 }
 defer db.Close()

 // Retrieve SNMP server details from the genopts table
 var snmpConfig SNMPConfig
 err = db.QueryRow("SELECT snmp_server_ip, snmp_trap_port FROM genopts LIMIT 1").Scan(&snmpConfig.IP, &snmpConfig.Port)
 if err != nil {
 return SNMPConfig{}, fmt.Errorf("Error retrieving SNMP server details: %s", err.Error())
 }

 return snmpConfig, nil
}

// Function to send SNMP trap to the SNMP server
func sendSNMPTrap(trapJSON []byte, ip string, port uint16) error {
 // Create a new SNMP client
 client := &gosnmp.GoSNMP{
 Target: ip,
 Port: port,
 Community: "public",
 Version: gosnmp.Version2c,
 Timeout: time.Duration(5) * time.Second,
 }

 // Connect to the SNMP server
 err := client.Connect()
 if err != nil {
 return err
 }
 defer client.Conn.Close()

 // Send the SNMP trap
 err = client.SendTrapBytes(trapJSON)
 if err != nil {
 return err
 }

 return nil
}

func main() {
 listenForSNMPTraps("127.0.0.1:222")
}